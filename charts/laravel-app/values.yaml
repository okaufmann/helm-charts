global: {}

imagePullSecrets:
- name: regcred

securityContext: {}

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: false
  # The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
  name: ""
  # Additional annotations for the ServiceAccount
  annotations: {}

meiliMasterKey: ""

# ensure meilisearch.auth.existingMasterKeySecret is set to this exact same value!
meiliMasterKeySecretName: "meilisearch-master-key"

metrics:
  enabled: true

statamic:
  enabled: false

  # this is the repo for the content for the app. as we only map the content folders, we can also use the same repo as the app repo itself.
  repo:
    sshUrl: "git@github.com:org/repository.git"
    sshPrivateKey: ""
    knownHosts: ""

  git:
    user: "statamic"
    email: "statamic@example.com"
    message: "Update from production [ci skip]"

  schedule: "*/10 * * * *"

  persistence:
    accessMode: "ReadWriteOnce"
    size: "10Gi"
    storageClass: ""

app:
  image:
    repository: serversideup/php:8.2-fpm-nginx
    pullPolicy: Always
    tag: "1.0.0"

  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  nodeSelector: {}

  tolerations: []

  podAnnotations:

  podSecurityContext: {}

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 200M
  # requests:
  #   cpu: 50m
  #   memory: 100M

  # Extra volumes to mount on the container.
  extraVolumeMounts: []
  # - name: my-extra-volume
  #   mountPath: /path/in/container

  extraVolumes: []
  # - name: my-extra-volume
  #   emptyDir: {}

  affinity: {}
  #     podAntiAffinity:
  #       preferredDuringSchedulingIgnoredDuringExecution:
  #         - podAffinityTerm:
  #             labelSelector:
  #               matchExpressions:
  #                 - key: role
  #                   operator: In
  #                   values:
  #                     - backend
  #             topologyKey: kubernetes.io/hostname
  #           weight: 100

  service:
    type: ClusterIP # Default service type.
    port: 80 # Default port the service listens on.
    targetPort: 80 # Default port the pods are exposing.
    nodePort: "" # For when service.type is NodePort.
    annotations: {} # Annotations to add to the service.
    labels: {} # Additional labels to add to the service.
    externalTrafficPolicy: Cluster # Can be set to Local to preserve source IP, or Cluster for default behavior.
    loadBalancerIP: "" # To set a specific IP for a LoadBalancer type service.
    loadBalancerSourceRanges: [] # IP whitelist for LoadBalancers.

  serviceMonitor:
    enabled: false

  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 30
    httpGet:
      path: /health
      port: 80

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 10
    httpGet:
      path: /health
      port: 80

  ingress:
    enabled: false # By default, do not create an ingress.
    ingressClassName: "" # Set to the name of the ingress class to use annotations.
    annotations: {} # Allow users to add any ingress annotations.
    hosts:
    - host: chart-example.local # Default host, users should override.
      paths:
      - / # Default path.
    tls:
    - hosts:
      - app.example.com
      secretName: app.example.com

queue:
  enabled: false

  image:
    repository: serversideup/php:8.2-fpm-nginx
    pullPolicy: Always
    tag: "1.0.0"

  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
    type: RollingUpdate

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 200M
  # requests:
  #   cpu: 50m
  #   memory: 100M

  nodeSelector: {}

  tolerations: []

  podAnnotations:

  podSecurityContext: {}

  # Extra volumes to mount on the container.
  extraVolumeMounts: []
  # - name: my-extra-volume
  #   mountPath: /path/in/container

  extraVolumes: []
  # - name: my-extra-volume
  #   emptyDir: {}

  affinity: {}
  #     podAntiAffinity:
  #       preferredDuringSchedulingIgnoredDuringExecution:
  #         - podAffinityTerm:
  #             labelSelector:
  #               matchExpressions:
  #                 - key: role
  #                   operator: In
  #                   values:
  #                     - backend
  #             topologyKey: kubernetes.io/hostname
  #           weight: 100


scheduler:
  enabled: false

  image:
    repository: serversideup/php:8.2-fpm-nginx
    pullPolicy: Always
    tag: "1.0.0"

  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 200M
  # requests:
  #   cpu: 50m
  #   memory: 100M

  nodeSelector: {}

  tolerations: []

  podAnnotations:

  podSecurityContext: {}

  # Extra volumes to mount on the container.
  extraVolumeMounts: []
  # - name: my-extra-volume
  #   mountPath: /path/in/container

  extraVolumes: []
  # - name: my-extra-volume
  #   emptyDir: {}

  affinity: {}
  #     podAntiAffinity:
  #       preferredDuringSchedulingIgnoredDuringExecution:
  #         - podAffinityTerm:
  #             labelSelector:
  #               matchExpressions:
  #                 - key: role
  #                   operator: In
  #                   values:
  #                     - backend
  #             topologyKey: kubernetes.io/hostname
  #           weight: 100



redis:
  # https://artifacthub.io/packages/helm/bitnami/redis
  enabled: false

  auth:
    enabled: false
    password: "yourpassword"

  ## @param architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone

  master:
    persistance:
      ## @param master.persistence.enabled Enable persistence on Redis&reg; master nodes using Persistent Volume Claims
      ##
      enabled: true

      ## @param master.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass: ""

      ## @param master.persistence.accessModes Persistent Volume access modes
      ##
      accessModes:
      - ReadWriteOnce

      ## @param master.persistence.size Persistent Volume size
      ##
      size: 8Gi

  # any other Redis-specific overrides...


meilisearch:
  # https://artifacthub.io/packages/helm/meilisearch-kubernetes/meilisearch
  enabled: false

  # Environment loaded into the configMap
  environment:
    # -- Deactivates analytics
    MEILI_NO_ANALYTICS: true
    # -- Sets the environment. Either **production** or **development**
    MEILI_ENV: production
    # For production deployment, the environment MEILI_MASTER_KEY is required.
    # If MEILI_ENV is set to "production" without setting MEILI_MASTER_KEY, this
    # chart will automatically create a secure MEILI_MASTER_KEY and push it as a
    # secret. Otherwise the below value of MEILI_MASTER_KEY will be used instead.
    # MEILI_MASTER_KEY: ""

  auth:
    # -- Use an existing Kubernetes secret for the MEILI_MASTER_KEY
    existingMasterKeySecret: "meilisearch-master-key"

  persistence:
    enabled: true

    accessMode: "ReadWriteOnce"

    size: "10Gi"

    storageClass: ""


  # any other MeiliSearch-specific overrides...
